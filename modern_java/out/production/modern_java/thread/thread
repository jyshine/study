Thread 실행 시키는 방법 두 가지.
    -Thread class 상속
    -Runable Interface Implements


Thread 공유 객체
    MusicBox
        playMusicA();
        playMusicB();
        playMusicC();

    MusicPlayer <- Thread.class
        int type;
        MusicBox musicBox;

    MusicPlayer Thread 객체 만들어 실행

동기화 메소드와 동기화 블록
    공유 객체였던 메소드가 동시에 호출되서 오류가 생길 가능성 있음
    공유객체가 가진 메소드를 동시에 호출 되지 않도록 하는 방법
    여러개의 Thread들이 공유객체의 메소드를 사용할 때 메소드에 synchronized가
    붙어 있을 경우 먼저 호출한 메소드가 객체의 사용권(Monitoring Lock)을 얻는다.
    해당 모니터링 락은 메소드 실행이 종료되거나, wait()와 같은 메소드를 만나기 전까지 유지된다.
    마지막에 대기하는 쓰레드가 너무 오래 기다리는것을 막기위해서 메소드에 synchronized를 붙이지 않고,
    문제가 있을것 같은 부분만 synchronized 블록을 사용한다.

Thread 상태 제어

thread1      thread2       thread3
    |
                |
                              |
    |
    |
                |
                              |



wait를 만나면 해당 Thread 객체에 모니터링락의 권한을 가지고 있다
wait, notify 동기화 블록 안에서 사용.


Daemon : 리눅스 유닉스 계열 운영체제에서 백그라운드에서 동작하는 프로그램 windows는 서비스;
Java에서도 Daemon Thread를 통해 유사하게 동작하게 가능





